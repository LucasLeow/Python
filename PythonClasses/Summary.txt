== 1 Classes & Instances ==
    - methods : functions within Classes
    - attributes : properties that a Class have
        - also known as instance variables

    
``` Overall Code Syntax ``` -----------------------------------------------------------------------------------------
    
    class Employee:

        num_employees = 0
        raise_amount = 1.04 # class variable
        
        def __init__(self, first, last, pay):
            self.first = first
            self.last = last
            self.pay = pay
            self.email = first + "." + last + "@company.com"
            Employee.num_employees += 1 # Want to modify for all instances

        def get_fullName(self):
            return '{} {}'.format(self.first, self.last)

        def apply_raise(self):
            self.pay = int(self.pay * self.raise_amount) # if self used, only instance raise_amount is modified
            # self.pay = int(self.pay * Employee.raise_amount) # if Employee used, all instance raise_amount modified

        @classmethod
        def set_raise_amt(cls, amount):
            cls.raise_amount = amount


        @classmethod # Alternative Constructor to parse string input
        def from_string(cls, emp_string):
            first, last, pay = emp_string.split('-')
            return cls(first, last, pay)

        @staticmethod
        def is_workday(day):
            # Monday = 0
            # Sunday = 6
            if day.weekday() == 5 or day.weekday() == 6:
                return False
            return True



    emp_1 = Employee("Lucas", "Leow", 10000)
    print(emp_1.get_fullName)
    print(Employee.fullName(emp_1))

    print(emp1.__dict__) # Accessing object namespace
    print(Employee.__dict__) # Accessing class namespace
    

    Employee.set_raise_amt(1.05)

    str1 = "John-Doe-70000"
    emp_parsed = Employee.from_string(str1) # Alternative Constructor concept (search below for details)


    # Static method example(see below for details)
    import datetime
    mydate = datetime.date(2023, 7, 14)

    print(Employee.is_workday(mydate))



``` ----------------------------------------------------------------------------------------------------------------- ```



    - Class = blueprint for creating instances (objects)

    - __init__ is used as constructor for python Classes
    - when creating methods within class, it receives instance of class as first argument automatically
        - by convention, named as "self"

    - 2 ways to call methods:

        1) Through each instance
            - emp1.get_fullName()

        2) Through Class
            - Employee.get_fullName(emp1)


== 2 Class Variables ==

    - variables shared among all instance of class
        eg:
            - pay_raise
            - num_students
            - num_shapes
            - num_animals
            etc.

    - Instance Variables -
        - unique for each instance
            - color
            - size
            - height
            - age
            etc.

    - Access Class variables via:
        - Class itself
            Employee.raise_amount
        - Instance of a Class
            self.raise_amount
                - will first check if the instance has the attribute
                - next, will check if the class has attribute
                - next, if inherited, will check parent class for attribute

    - Access namespace of objects:
        - print(emp1.__dict__)


    ** Modifying Class Variables **

        Employee.raise_amount = 1.05
            - changes value for all instances
        
        emp_1.raise_amount = 1.05
            - only changes value for emp_1 instance
            - creates raise_amount instance variable for emp_1
                - no longer dealing with the class variable

            * Important concept
                - sometimes only want to change value for certain instance
                - eg: increasing pay rate only for emp_1 instead of all Employees


== 3 Class methods & Static methods ==
    
    -- Class methods --
        - takes in class as 1st argument instead of instance (self) as 1st argument
        - using @classmethod decorator
        - convention is "cls" for class argument


                @classmethod
                def set_raise_amt(cls, amount):
                    cls.raise_amount = amount


                Employee.set_raise_amt(1.05)
                    - alter class variable

                emp1.set_raise_amt(1.05)
                    - still alters class variable

    
    -- Class methods as alternative constructors -- 
        - using class method to create objects
        - eg: to parse string input into instance variables

            str1 = "John-Doe-70000"
            str2 = "Jane-Smith-30000"
            str3 = "Bob-Michael-50000"
            
        * convention is to prefix alternative constructor with "from"

        @classmethod
        def from_string(cls, emp_string):
            first, last, pay = emp_string.split('-')
            return cls(first, last, pay)

        emp_parsed = Employee.from_string(str1)


        -- Static Methods --
            - Dont pass anything to method automatically (no self / cls)
            - using @staticmethod decorator
            - used when instance or class not required within class 
                 - but work performed still relevant to class
            - accessed using Class
                - Employee.is_workday()


            @staticmethod
            def is_workday(day):
                # Monday = 0
                # Sunday = 6
                if day.weekday() == 5 or day.weekday() == 6:
                    return False
                return True
            
            import datetime
            mydate = datetime.date(2023, 7, 14)
            print(Employee.is_workday(mydate))

== 4 Inheritance ==
    - get attributes & methods from parent class
    - can override parent class methods for own more specific implementation
    

    class Developer(Employee):
        raise_amt = 1.1 # Developer class raise_amt does not affect parent class raise_amt
        
        def __init__(self, first, last, pay, prog_lang):
            super().__init__(first, last, pay)
            # Employee.__init__(self, first, last, pay) Also valid but not typically used
            self.prog_lang = prog_lang

    class Manager(Employee):
        def __init__(self, first, last, pay, employees=None):
            super().__init__(first, last, pay)
            if employees is None:
                self.employees = []
            else:
                self.employees = employees
        
        def add_employee(self, emp):
            if emp not in self.employees:
                self.employees.append(emp)

        def remove_employee(self, emp):
            if emp in self.employees:
                self.employees.remove(emp)
        
        def print_emps(self):
            for emp in self.employees:
                print("-->", emp.get_fullName())
            
    # * Not recommended to pass mutable datatype (list) as arguments


    dev_1 = Developer("Lucas", "Leow", 60000, "Python")
    dev_2 = Developer("Tom", "Tim", 40000, "Java")
    mgr_1 = Manager("Sue", "Ann", 80000, [dev_1])
    mgr_1.add_employee(dev_2)

    print(mgr_1.email)
    mgr_1.print_emps()


    -- isinstance --
        - tells if object is instance of a class
        print(isinstance(mgr_1, Manager)) : True
        print(isinstance(mgr_1, Employee)) : True
        print(isinstance(mgr_1, Developer)) : False

    -- issubclass --
        - tells if object is subclass of a parent class
        print(issubclass(Manager, Developer)) : False
        print(issubclass(Manager, Employee)) : True


== 5 Special Methods within Classes ==

    - also known as Magic / Dunder methods
    - technique to implement operator overloading
    
    - function always surrounded with "__"
        eg: __init__
            - known as dunder
            dunder init means __init__
        
    2 common special methods for objects:

            1) __repr__(self)
                - representation of object (for debugging / logging)
                - for developers

            2) __str__(self)
                - readable representation of object
                - for end user

            
                def __repr__(self):
                    return "Employee('{}', '{}', '{}')".format(self.first, self.last, self.pay)
                
                def __str__(self):
                    return "{} - {}".format(self.get_fullName(), self.email)
                
                emp_1 = Employee("Lucas", "Leow", 50000)

                print(repr(emp_1))
                print(str(emp_1))

                print(emp_1.__repr__())
                print(emp_1.__str__())


        -- Operator Overloading --
            
            def __add__(self, other):
                return self.pay + other.pay

            def __len__(self):
                return(len(self.get_fullName()))
            
            emp_1 = Employee("lucas", "leow", 50000)
            emp_2 = Employee("Timmy", "Tan", 30000)

            print(emp_1 + emp_2) # Output will be 80000
                # if not overloaded with __add__, object addition throws an error 
            
            print(len(emp_1)) # prints len of full name = 9 since len overload with __len__
                - if method not overload, error thrown: Object type has no method len

        ** Datetime utilize operator overloading to sum datetimes

            