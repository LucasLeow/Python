== Decorators ==
    - add functionality to functions
    - Practical Application of Decorators 


def mydecorator(function):
    def wrapper(*args, **kwargs): # To make decorator function universal by accepting any argument
        function(*args, **kwargs)
        print("I am decorating the function")
    
    return wrapper

@mydecorator
def hello(person):
    print(f"Hello {person}!")

hello_world()



== If want to execute function first, then perform decoration ==


def mydecorator(function):
    def wrapper(*args, **kwargs): # To make decorator function universal by accepting any argument
        return_value = function(*args, **kwargs)
        print("I am decorating the function")
        return return_value
    
    return wrapper

@mydecorator
def hello(person):
    return f"Hello {person}!"

print(hello_world("Lucas"))



== Practical Application of Decorators  ==

    1) Logging (Not typically done like this, just for demo)
        - Implement logging functionality using decorator

    def logged(function):
        def wrapper(*args, **kwargs):
            value = function(*args, **kwargs) # calling function & save in value
            with open("logfile.txt", "a+") as f:
                fname = function.__name__
                print(f"{fname} returned value {value}")
                f.write(f"{fname} returned value {value}")

                f.close()
            return value
        return wrapper
    
    @logged
    def add(x, y):
        return x + y
    
    print(add(10, 20))
    
    2) Timing functions

    import time

    def timed(function):
        def wrapper(*args, **kwargs):
            before = time.time()
            value = function(*args, **kwargs)
            after = time.time()
            fname = function.__name__
            print(f"{fname} took {after - before} seconds to execute")
            return value
    
        return wrapper

    @time
    def myFunction(x):
        result = 1
        for i in range(1, x):
            result *= i
        return result

    myFunction(10)