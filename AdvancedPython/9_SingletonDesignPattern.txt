Keywords:
    - Singleton Design Pattern
    - Python Impl of Singleton


== Singleton Design Pattern ==
    - Class can only have single instance
    - multiple ways to implement singleton in Python



Python Impl of Singleton:

    from abc import ABCMeta, abstractstaticmethod

    class IPerson(metaclass = ABCMeta):
        @abstractstaticmethod
        def print_data():
            '''implement in child class'''
    
    class PersonSingleton(IPerson):
        __instance = None # The only single instance to be created

        @staticmethod
        def get_instance():
            if PersonSingleton.__instance == None:
                PersonSingleton("Default Name", 0)
                # __instance instantiated in constructor
            return PersonSingleton.__instance
        
        def __init__(self, name, age):
            if PersonSingleton.__instance != None:
                raise Exception("Singleton cannot be instantiated again")
            else:
                self.name = name
                self.age = age
                PersonSingleton.__instance = self
        
        @staticmethod
        def print_data():
            print(f"Name: {PersonSingle.__instance.name}")
    
    p = PersonSingleton("Lucas", 20)
    p2 = PersonSingleton.get_instance()
