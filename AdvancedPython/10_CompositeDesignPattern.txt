keywords
    - Composite Design Pattern
    - Python impl 


== Composite Design Pattern ==
    - Multiple class inherit from parent class
    - Each of those classes can have their own child classes

    eg:
    Electronics : main parent class
        - has 3 child (Laptop, Television, Mobile phones)
        - each of those 3 child have their own children

        - Electronics
            - Laptops
                - Dell
                - Lenovo
                - Apple
            - Televisions
                - Samsung
                - LG
            - Mobile Phones
                - Samsung
                - Apple
                - Google

== Python impl ==

    from abc import ABCMeta, abstractmethod, abstractstaticmethod

    class IDepartment(metaclass = ABCMeta):
        @abstractmethod
        def __init__(self, employees):
            ''' implement in child class '''
        
        @abstractstaticmethod
        def print_department(self):
            ''' implement in child class '''
        
    class Accounting(IDepartment):
        def __init__(self, employees):
            self.employees = employees
        
        def print_department(self):
            print(f"Accounting department {self.employees}")

    class Development(IDepartment):
        def __init__(self, employees):
            self.employees = employees
        
        def print_department(self):
            print(f"Development department {self.employees}")
    

    class ParentDepartment(IDepartment):
        def __init__(self, employees):
            self.employees = employees
            self.base_employees = employees
            self.sub_depts = []
        
        def add(self, dept):
            self.sub_depts.append(dept)
            self.employees += dept.employees
        
        def print_department(self):
            print("Parent Dept")
            print(f"Parent Dept Base Employees: {self.base_employees}")

            for dept in self.sub_depts:
                dept.print_department()

parent_dept = ParentDepartment(30)

accounting_dept = Accounting(50)
dev_dept = Development(50)

parent_dept.add(accouting_dept)
parent_dept.add(dev_dept)

parent_dept.print_department()