Keywords:
    - Factory Design Pattern



== Factory Design Pattern ==
    - 1 of many OOP Design patterns 
    - Is a creational pattern 
    - considered 1 of the best way to create objects
    - create object without exposing creation logic to client
    - create objects via common interface shared among all classes

    eg:
        Shape Interface + draw() method
            - Square class (Shape)
            - Circle class (Shape)
            - Triangle class (Shape)
        
        Shape Factory
            - getShape(): Shape

    - Design Patterns are typically used in larger projects
        - multiple classes / modules working together

        - If used on smaller projects:
            - increase complexity
            - decrease readability & understandability

    - If want to include new class, can just extend from factory builder method


    Code:

    from abc import ABCMeta, abstractstaticmethod

    class IPerson(metaclass = ABCMeta):
        @abstractstaticmethod
        def person_method():
            '''Interface Method'''
        
    class Student(IPerson):
        def __init__(self):
            self.name = "Student Name"
        def person_method():
            print("I am a student")
    
    class Teacher(IPerson):
        def __init__(self):
            self.name = "Teacher Name"
        def person_method():
            print("I am a teacher")

    class PersonFactory:
        @staticmethod
        def build_person(person_type):
            if (person_type == "student"):
                return Student()
            if (person_type == "teacher"):
                return Teacher()
            print("Invalid Type")
            return -1

    if __name__ == "__main__":
        choice = input("What type of person you want to create? \n")
        person = PersonFactory.build_person(choice)
        person.person_method()
        