== 1 Intro to DataStruct ==
    
    What are Data Structures?

        - Building blocks to create software applications
        - Software Applications = Algorithms (Instructions) + Data Structures

        - Need to use correct Data Structure for given problem
        - Each Data Structure have pros & cons

        - Different language have different implementation of data structures
        - data structures is conceptual


        Arrays:
            Python - List
            Java - Native Array | ArrayList
            c++ - Native array | std::vector

        Hashmap:
            Python - dictionary
            Java - HashMap | LinkedHashMap
            c++ - std::map
        
        LinkedList:
            Python - Not avail
            Java - LinkedList
            c++ - std::list




== 2 Big O notation ==

    - measure of:
        - running time
        - space requirements
    
        as input size grows
    

    - Measure of time (using stopwatch) is not feasible
        - different computers have different processing power
    - Mathematical representation of running time more feasible (big O)

    Actually have 3 notation:
        - best case scenario : Big Omega notation
            - fastest time, smallest memory

        - worst case scenario : Big O notation
            - slowest time, largest memory

        - average of best & worst : Big Theta notation



        Big O Notation:

            - O(1) : constant time 
                - time remains fairly constant as input size increase
                - hashmap search with index is constant time

            - O(log n) : logarithmic time
                - finding element in sorted array (binary search, lefthalf righthalf)
            
            -  O(n) : linear time
                - time increases linearly as input increases
                - looping through array for searching / performing operation

            - O(n log n): linearithmic time
                - sorting elements with merge sort

            - O(n^2) : quadratic time
            - running nested 2 loops

            - O(n^3) : cubic time
                - running nested 3 loops
            
            - O(2^n) : exponential time
                - find all subsets
            
            - O(n!) : factorial time
                - find all permutation of given set



