-- Creating virtual envs --
    conda create -n "myenv" python=3.9
    pip install pandas




-- Setting rows / columns display --
pd.set_option('max_columns', None)
pd.set_option('max_columns', 2)
pd.set_option("max_rows", None)
pd.set_option("max_rows", 2)






import pandas as pd
df = pd.read_csv("../datasets/survey_results_public.csv")
df = pd.read_csv(<file_path>, index_col=<col_name>)

df.head(5) # show top 5 records
df.tail(5) # show last 5 records

df.shape # show (rows, cols)
df.info() # show columns, no. of non-null data, dtype of column
df.dtypes # show datatypes of columns







-- Creating DataFrames -- (2D Data structure)
    - table containing rows & cols of data
        - row: record
        - col: fields 

    data = {
        "col1": [1,2,3],
        "col2":[4,5,6],
        "col3":[7,8,9]
    }

    df = pd.DataFrame(data)




-- Series --
- 1-D dataframe having own series method
    





-- Manipulating columns --

df['col1'] # access col 1 of data as series
df.col1 # also valid, provided <col> no whitespaces / not method name

df[['col1', 'col2']] # access multiple columns (as DF)

df.columns # get column names






== Manipulating Rows ==
    * getting certain row records

    - using loc & iloc
        - iloc uses index
        - loc searches by labels 

    df.iloc[0] # gives 1st row data as panda series
    df.iloc[[0, 1]] # gives 1st 2 rows of data

    df.iloc[[0,1], 0] # gives 1st column data instead of row 
        - 1 for 2nd columns etc.

* If index is not string, loc behaves like iloc
df.loc[0] # return 1st row data
df.loc[[0,1]] returns 1st 2 row data

* if index is string (eg. email / full_name):
    - can still use iloc to pass integer as rows (by default first row is 0)

    df.loc['lucasleow@gmail.com'] # return all rows that have index lucasleow@gmail.com
    df.loc["lucasleow"]
    df.loc["lucasleow", <col>]
    df.loc['I am a developer by profession',['Age', 'RemoteWork']]
        - search by index, return Age & RemoteWork col


df.loc[0, 'col1'] # get 1st row data for that given column (single output)
df.loc[[0,1], 'col3'] # get first 2 row data from "col3"
df.loc[[0,1], ['col1', 'col3']] # get first 2 row data from col1 & col3

df.loc[0:2] # show first 3 row of data
df.loc[0:2,  'col1'] #slicing data, get first 3 data from 'col1'

df.loc[0:2, 'col1':'col3']

df['Hobbyist'].value_counts() # provide count for categorical data






== Manipulating Indexes ==
    - typically should be unique value as identifier for each row
    - not enforced by pandas

    df.set_index(<col_name>)
    df.set_index('email', inplace=True) 
        - by default, pandas dont set inplace for ppl to experiment

    df.index
    list(df.index)
        - provides object of all index values

    df.reset_index(inplace=True)
    df.sort_index() # more useful for alphabetical indexes
    df.sort_index(ascending=False, inplace=True)





== Filtering Data ==
    
